{"version":3,"sources":["components/Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["liff","window","Homepage","useState","name","setName","userLineID","setUserLineID","pictureUrl","setPictureUrl","statusMessage","setStatusMessage","useEffect","init","a","getProfile","displayName","userId","className","width","src","alt","Button","variant","onClick","sendMessages","type","text","then","closeWindow","bind","this","style","marginRight","color","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAIMA,EAAOC,OAAOD,KAEL,SAASE,IAEpB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA0CN,mBAAS,IAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WAEFZ,EAAKa,KAAL,sBAAU,4BAAAC,EAAA,sEACiBd,EAAKe,aADtB,OACFA,EADE,OAENV,EAAQU,EAAWC,aACnBT,EAAcQ,EAAWE,QACzBR,EAAcM,EAAWP,YACzBG,EAAiBI,EAAWL,eALtB,8CASf,IAeH,OACI,qBAAKQ,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKA,UAAU,UAAf,SACI,qBAAKC,MAAM,MAAMC,IAAI,+CAA+CC,IAAI,OAE5E,qBAAKH,UAAU,UAAf,SAESV,GAA6B,KAAfA,EAEX,qBAAKW,MAAM,MAAMC,IAAKZ,EAAYa,IAAI,KAEtC,OAIPjB,GAAiB,KAATA,EAEL,uCAAUA,KAEV,KAGHE,GAA6B,KAAfA,EAEX,yCAAYA,KAEZ,KAGHI,GAAmC,KAAlBA,EAEd,gDAAmBA,KAEnB,KAER,sBAAKQ,UAAU,UAAf,UACI,cAACI,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAlDxB,WAChBxB,EAAKyB,aAAa,CAAC,CACfC,KAAM,OACNC,KAAM,aACNC,MAAK,WACL5B,EAAK6B,kBA6CoDC,KAAKC,MAAOC,MAAO,CAAEC,YAAa,QAAnF,0BAGA,cAACX,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QA5C1B,WACdxB,EAAK6B,eA2CsDC,KAAKC,MAAOG,MAAM,YAAjE,gCCjELC,MAVf,WACE,OACE,cAAC,IAAD,CAAeC,SAAU,sBAAzB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,SCI1BsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.400812a1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport '../App.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst liff = window.liff;\r\n\r\nexport default function Homepage() {\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [userLineID, setUserLineID] = useState(\"\")\r\n    const [pictureUrl, setPictureUrl] = useState(\"\")\r\n    const [statusMessage, setStatusMessage] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        const getProfile = () => {\r\n            liff.init(async () => {\r\n                let getProfile = await liff.getProfile();\r\n                setName(getProfile.displayName);\r\n                setUserLineID(getProfile.userId);\r\n                setPictureUrl(getProfile.pictureUrl);\r\n                setStatusMessage(getProfile.statusMessage);\r\n            });\r\n        }\r\n        getProfile()\r\n    }, [])\r\n\r\n    const sendMessage = () => {\r\n        liff.sendMessages([{\r\n            type: 'text',\r\n            text: \"Hi LIFF\"\r\n        }]).then(() => {\r\n            liff.closeWindow();\r\n        });\r\n    }\r\n\r\n    const closeLIFF = () => {\r\n        liff.closeWindow();\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <div className=\"support\">\r\n                    <img width=\"25%\" src=\"https://img.icons8.com/color/420/line-me.png\" alt=\"\" />\r\n                </div>\r\n                <div className=\"support\">\r\n                    {\r\n                        (pictureUrl && pictureUrl !== '')\r\n                            ?\r\n                            <img width=\"25%\" src={pictureUrl} alt=\"\" />\r\n                            :\r\n                            null\r\n                    }\r\n                </div>\r\n                {\r\n                    (name && name !== '')\r\n                        ?\r\n                        <p>Name: {name}</p>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    (userLineID && userLineID !== '')\r\n                        ?\r\n                        <p>LineID: {userLineID}</p>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    (statusMessage && statusMessage !== '')\r\n                        ?\r\n                        <p>statusMessage: {statusMessage}</p>\r\n                        :\r\n                        null\r\n                }\r\n                <div className=\"support\">\r\n                    <Button variant=\"contained\" onClick={sendMessage.bind(this)} style={{ marginRight: '20px' }}>\r\n                        Send Message\r\n                    </Button>\r\n                    <Button variant=\"contained\" onClick={closeLIFF.bind(this)} color=\"secondary\">\r\n                        Close LIFF\r\n                    </Button>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\n// class Homepage extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n\r\n//         this.state = {\r\n//             name: '',\r\n//             userLineID: '',\r\n//             pictureUrl: '',\r\n//             statusMessage: ''\r\n//         };\r\n//     }\r\n\r\n//     getProfile() {\r\n//         liff.init(async () => {\r\n//             let getProfile = await liff.getProfile();\r\n//             this.setState({\r\n//                 name: getProfile.displayName,\r\n//                 userLineID: getProfile.userId,\r\n//                 pictureUrl: getProfile.pictureUrl,\r\n//                 statusMessage: getProfile.statusMessage\r\n//             });\r\n//         });\r\n//     }\r\n\r\n//     sendMessage() {\r\n//         liff.sendMessages([{\r\n//             type: 'text',\r\n//             text: \"Hi LIFF\"\r\n//         }]).then(() => {\r\n//             liff.closeWindow();\r\n//         });\r\n//     }\r\n\r\n//     closeLIFF() {\r\n//         liff.closeWindow();\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"App\">\r\n//                 <header className=\"App-header\">\r\n//                     <div className=\"support\">\r\n//                         <img width=\"25%\" src=\"https://img.icons8.com/color/420/line-me.png\" alt=\"\" />\r\n//                     </div>\r\n//                     <div className=\"support\">\r\n//                         {\r\n//                             (this.state.pictureUrl && this.state.pictureUrl !== '')\r\n//                                 ?\r\n//                                 <img width=\"25%\" src={this.state.pictureUrl} alt=\"\" />\r\n//                                 :\r\n//                                 null\r\n//                         }\r\n//                     </div>\r\n//                     {\r\n//                         (this.state.name && this.state.name !== '')\r\n//                             ?\r\n//                             <p>Name: {this.state.name}</p>\r\n//                             :\r\n//                             null\r\n//                     }\r\n//                     {\r\n//                         (this.state.userLineID && this.state.userLineID !== '')\r\n//                             ?\r\n//                             <p>LineID: {this.state.userLineID}</p>\r\n//                             :\r\n//                             null\r\n//                     }\r\n//                     {\r\n//                         (this.state.statusMessage && this.state.statusMessage !== '')\r\n//                             ?\r\n//                             <p>statusMessage: {this.state.statusMessage}</p>\r\n//                             :\r\n//                             null\r\n//                     }\r\n//                     <div className=\"support\">\r\n//                         <Button variant=\"contained\" onClick={this.getProfile.bind(this)} style={{ marginRight: '20px' }} color=\"primary\">\r\n//                             Getdata INFO\r\n//                         </Button>\r\n//                         <Button variant=\"contained\" onClick={this.sendMessage.bind(this)} style={{ marginRight: '20px' }}>\r\n//                             Send Message\r\n//                         </Button>\r\n//                         <Button variant=\"contained\" onClick={this.closeLIFF.bind(this)} color=\"secondary\">\r\n//                             Close LIFF\r\n//                         </Button>\r\n//                     </div>\r\n//                 </header>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Homepage;","import './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Homepage from './components/Homepage';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={'/sit-scor-line-liff'}>\n      <Switch>\n        <Route exact path=\"/\" component={Homepage} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}